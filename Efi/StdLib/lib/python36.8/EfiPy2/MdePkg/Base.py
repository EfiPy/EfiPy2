# Base.py
#
# EfiPy2.MdePkg.Base
#   part of EfiPy, EfiPy2
#
# Copyright (C) 2015 - 2024 MaxWu efipy.core@gmail.com
#   GPL-2.0
#
from ctypes  import *
from EfiPy2._EfiPy2Pre import MAX_BIT

from EfiPy2.MdePkg.Uefi.ProcessorBind import *
class GUID (Structure):
  _fields_ = [
    ("Data1",   UINT32),
    ("Data2",   UINT16),
    ("Data3",   UINT16),
    ("Data4",   UINT8 * 8)
    ]

  def __str__ (self):

    return "%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X" % (
      self.Data1,
      self.Data2,
      self.Data3,
      self.Data4[0],
      self.Data4[1],
      self.Data4[2],
      self.Data4[3],
      self.Data4[4],
      self.Data4[5],
      self.Data4[6],
      self.Data4[7],
      )

  def __eq__(self, other):

        # if isinstance(other, self.__class__):
        #   return self.__dict__ == other.__dict__

        #else:

        if self.Data1 == other.Data1 and  \
           self.Data2 == other.Data2 and  \
           self.Data3 == other.Data3 and  \
           cast (self.Data4, POINTER(UINT64))[0] == cast (other.Data4, POINTER(UINT64))[0]:
          return True

        else:
          return False

  def __ne__(self, other):

        if isinstance(other, self.__class__):
          return not self.__eq__(other)
        else:
          return True

PHYSICAL_ADDRESS = UINT64
class LIST_ENTRY (Structure):
  pass

LIST_ENTRY._fields_ = [
    ("ForwardLink", POINTER(LIST_ENTRY)),
    ("BackLink",    POINTER(LIST_ENTRY))
  ]
VOID = None
MAX_INT8    = 0x7F
MAX_UINT8   = 0xFF
MAX_INT16   = 0x7FFF
MAX_UINT16  = 0xFFFF
MAX_INT32   = 0x7FFFFFFF
MAX_UINT32  = 0xFFFFFFFF
MAX_INT64   = 0x7FFFFFFFFFFFFFFF
MAX_UINT64  = 0xFFFFFFFFFFFFFFFF
BIT0     = 0x00000001
BIT1     = 0x00000002
BIT2     = 0x00000004
BIT3     = 0x00000008
BIT4     = 0x00000010
BIT5     = 0x00000020
BIT6     = 0x00000040
BIT7     = 0x00000080
BIT8     = 0x00000100
BIT9     = 0x00000200
BIT10    = 0x0000400
BIT11    = 0x0000800
BIT12    = 0x0001000
BIT13    = 0x0002000
BIT14    = 0x0004000
BIT15    = 0x0008000
BIT16    = 0x0010000
BIT17    = 0x0020000
BIT18    = 0x0040000
BIT19    = 0x0080000
BIT20    = 0x0100000
BIT21    = 0x0200000
BIT22    = 0x0400000
BIT23    = 0x0800000
BIT24    = 0x1000000
BIT25    = 0x2000000
BIT26    = 0x4000000
BIT27    = 0x8000000
BIT28    = 0x10000000
BIT29    = 0x20000000
BIT30    = 0x40000000
BIT31    = 0x80000000
BIT32    = 0x0000000100000000
BIT33    = 0x0000000200000000
BIT34    = 0x0000000400000000
BIT35    = 0x0000000800000000
BIT36    = 0x0000001000000000
BIT37    = 0x0000002000000000
BIT38    = 0x0000004000000000
BIT39    = 0x0000008000000000
BIT40    = 0x0000010000000000
BIT41    = 0x0000020000000000
BIT42    = 0x0000040000000000
BIT43    = 0x0000080000000000
BIT44    = 0x0000100000000000
BIT45    = 0x0000200000000000
BIT46    = 0x0000400000000000
BIT47    = 0x0000800000000000
BIT48    = 0x0001000000000000
BIT49    = 0x0002000000000000
BIT50    = 0x0004000000000000
BIT51    = 0x0008000000000000
BIT52    = 0x0010000000000000
BIT53    = 0x0020000000000000
BIT54    = 0x0040000000000000
BIT55    = 0x0080000000000000
BIT56    = 0x0100000000000000
BIT57    = 0x0200000000000000
BIT58    = 0x0400000000000000
BIT59    = 0x0800000000000000
BIT60    = 0x1000000000000000
BIT61    = 0x2000000000000000
BIT62    = 0x4000000000000000
BIT63    = 0x8000000000000000
SIZE_1KB    = 0x00000400
SIZE_2KB    = 0x00000800
SIZE_4KB    = 0x00001000
SIZE_8KB    = 0x00002000
SIZE_16KB   = 0x00004000
SIZE_32KB   = 0x00008000
SIZE_64KB   = 0x00010000
SIZE_128KB  = 0x00020000
SIZE_256KB  = 0x00040000
SIZE_512KB  = 0x00080000
SIZE_1MB    = 0x00100000
SIZE_2MB    = 0x00200000
SIZE_4MB    = 0x00400000
SIZE_8MB    = 0x00800000
SIZE_16MB   = 0x01000000
SIZE_32MB   = 0x02000000
SIZE_64MB   = 0x04000000
SIZE_128MB  = 0x08000000
SIZE_256MB  = 0x10000000
SIZE_512MB  = 0x20000000
SIZE_1GB    = 0x40000000
SIZE_2GB    = 0x80000000
SIZE_4GB    = 0x0000000100000000
SIZE_8GB    = 0x0000000200000000
SIZE_16GB   = 0x0000000400000000
SIZE_32GB   = 0x0000000800000000
SIZE_64GB   = 0x0000001000000000
SIZE_128GB  = 0x0000002000000000
SIZE_256GB  = 0x0000004000000000
SIZE_512GB  = 0x0000008000000000
SIZE_1TB    = 0x0000010000000000
SIZE_2TB    = 0x0000020000000000
SIZE_4TB    = 0x0000040000000000
SIZE_8TB    = 0x0000080000000000
SIZE_16TB   = 0x0000100000000000
SIZE_32TB   = 0x0000200000000000
SIZE_64TB   = 0x0000400000000000
SIZE_128TB  = 0x0000800000000000
SIZE_256TB  = 0x0001000000000000
SIZE_512TB  = 0x0002000000000000
SIZE_1PB    = 0x0004000000000000
SIZE_2PB    = 0x0008000000000000
SIZE_4PB    = 0x0010000000000000
SIZE_8PB    = 0x0020000000000000
SIZE_16PB   = 0x0040000000000000
SIZE_32PB   = 0x0080000000000000
SIZE_64PB   = 0x0100000000000000
SIZE_128PB  = 0x0200000000000000
SIZE_256PB  = 0x0400000000000000
SIZE_512PB  = 0x0800000000000000
SIZE_1EB    = 0x1000000000000000
SIZE_2EB    = 0x2000000000000000
SIZE_4EB    = 0x4000000000000000
SIZE_8EB    = 0x8000000000000000
BASE_1KB    = 0x00000400
BASE_2KB    = 0x00000800
BASE_4KB    = 0x00001000
BASE_8KB    = 0x00002000
BASE_16KB   = 0x00004000
BASE_32KB   = 0x00008000
BASE_64KB   = 0x00010000
BASE_128KB  = 0x00020000
BASE_256KB  = 0x00040000
BASE_512KB  = 0x00080000
BASE_1MB    = 0x00100000
BASE_2MB    = 0x00200000
BASE_4MB    = 0x00400000
BASE_8MB    = 0x00800000
BASE_16MB   = 0x01000000
BASE_32MB   = 0x02000000
BASE_64MB   = 0x04000000
BASE_128MB  = 0x08000000
BASE_256MB  = 0x10000000
BASE_512MB  = 0x20000000
BASE_1GB    = 0x40000000
BASE_2GB    = 0x80000000
BASE_4GB    = 0x0000000100000000
BASE_8GB    = 0x0000000200000000
BASE_16GB   = 0x0000000400000000
BASE_32GB   = 0x0000000800000000
BASE_64GB   = 0x0000001000000000
BASE_128GB  = 0x0000002000000000
BASE_256GB  = 0x0000004000000000
BASE_512GB  = 0x0000008000000000
BASE_1TB    = 0x0000010000000000
BASE_2TB    = 0x0000020000000000
BASE_4TB    = 0x0000040000000000
BASE_8TB    = 0x0000080000000000
BASE_16TB   = 0x0000100000000000
BASE_32TB   = 0x0000200000000000
BASE_64TB   = 0x0000400000000000
BASE_128TB  = 0x0000800000000000
BASE_256TB  = 0x0001000000000000
BASE_512TB  = 0x0002000000000000
BASE_1PB    = 0x0004000000000000
BASE_2PB    = 0x0008000000000000
BASE_4PB    = 0x0010000000000000
BASE_8PB    = 0x0020000000000000
BASE_16PB   = 0x0040000000000000
BASE_32PB   = 0x0080000000000000
BASE_64PB   = 0x0100000000000000
BASE_128PB  = 0x0200000000000000
BASE_256PB  = 0x0400000000000000
BASE_512PB  = 0x0800000000000000
BASE_1EB    = 0x1000000000000000
BASE_2EB    = 0x2000000000000000
BASE_4EB    = 0x4000000000000000
BASE_8EB    = 0x8000000000000000
BASE_LIST = POINTER(UINTN)
RETURN_STATUS = UINTN


def ENCODE_ERROR (StatusCode):

  return StatusCode | MAX_BIT


def ENCODE_WARNING (StatusCode):

  return StatusCode


def RETURN_ERROR (StatusCode):

  if StatusCode & MAX_BIT:
    return True
  else:
    return False

RETURN_SUCCESS               = 0
RETURN_LOAD_ERROR            = ENCODE_ERROR (1)
RETURN_INVALID_PARAMETER     = ENCODE_ERROR (2)
RETURN_UNSUPPORTED           = ENCODE_ERROR (3)
RETURN_BAD_BUFFER_SIZE       = ENCODE_ERROR (4)
RETURN_BUFFER_TOO_SMALL      = ENCODE_ERROR (5)
RETURN_NOT_READY             = ENCODE_ERROR (6)
RETURN_DEVICE_ERROR          = ENCODE_ERROR (7)
RETURN_WRITE_PROTECTED       = ENCODE_ERROR (8)
RETURN_OUT_OF_RESOURCES      = ENCODE_ERROR (9)
RETURN_VOLUME_CORRUPTED      = ENCODE_ERROR (10)
RETURN_VOLUME_FULL           = ENCODE_ERROR (11)
RETURN_NO_MEDIA              = ENCODE_ERROR (12)
RETURN_MEDIA_CHANGED         = ENCODE_ERROR (13)
RETURN_NOT_FOUND             = ENCODE_ERROR (14)
RETURN_ACCESS_DENIED         = ENCODE_ERROR (15)
RETURN_NO_RESPONSE           = ENCODE_ERROR (16)
RETURN_NO_MAPPING            = ENCODE_ERROR (17)
RETURN_TIMEOUT               = ENCODE_ERROR (18)
RETURN_NOT_STARTED           = ENCODE_ERROR (19)
RETURN_ALREADY_STARTED       = ENCODE_ERROR (20)
RETURN_ABORTED               = ENCODE_ERROR (21)
RETURN_ICMP_ERROR            = ENCODE_ERROR (22)
RETURN_TFTP_ERROR            = ENCODE_ERROR (23)
RETURN_PROTOCOL_ERROR        = ENCODE_ERROR (24)
RETURN_INCOMPATIBLE_VERSION  = ENCODE_ERROR (25)
RETURN_SECURITY_VIOLATION    = ENCODE_ERROR (26)
RETURN_CRC_ERROR             = ENCODE_ERROR (27)
RETURN_END_OF_MEDIA          = ENCODE_ERROR (28)
RETURN_END_OF_FILE           = ENCODE_ERROR (31)
RETURN_INVALID_LANGUAGE      = ENCODE_ERROR (32)
RETURN_COMPROMISED_DATA      = ENCODE_ERROR (33)
RETURN_WARN_UNKNOWN_GLYPH    = ENCODE_WARNING (1)
RETURN_WARN_DELETE_FAILURE   = ENCODE_WARNING (2)
RETURN_WARN_WRITE_FAILURE    = ENCODE_WARNING (3)
RETURN_WARN_BUFFER_TOO_SMALL = ENCODE_WARNING (4)
RETURN_WARN_STALE_DATA       = ENCODE_WARNING (5)
def SIGNATURE_16(A, B):

  if type(A) is str:
    A = ord (A)

  if type(B) is str:
    B = ord (B)

  return A | (B << 8)

def SIGNATURE_32(A, B, C, D):
  return SIGNATURE_16 (A, B) | (SIGNATURE_16 (C, D) << 16)

def SIGNATURE_64(A, B, C, D, E, F, G, H):
  return SIGNATURE_32 (A, B, C, D) | (SIGNATURE_32 (E, F, G, H) << 32)

