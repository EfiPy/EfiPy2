# Spdm.py
#
# EfiPy2.MdePkg.IndustryStandard.Spdm
#   part of EfiPy2
#
# Copyright (C) 2023 - 2025 MaxWu efipy.core@gmail.com
#   GPL-2.0
#
from EfiPy2.MdePkg.IndustryStandard import *

SPDM_MAX_SLOT_COUNT        = 8
SPDM_MAX_OPAQUE_DATA_SIZE  = 1024
SPDM_NONCE_SIZE            = 32
SPDM_RANDOM_DATA_SIZE      = 32

SPDM_DIGESTS                  = 0x01
SPDM_CERTIFICATE              = 0x02
SPDM_CHALLENGE_AUTH           = 0x03
SPDM_VERSION                  = 0x04
SPDM_MEASUREMENTS             = 0x60
SPDM_CAPABILITIES             = 0x61
SPDM_ALGORITHMS               = 0x63
SPDM_VENDOR_DEFINED_RESPONSE  = 0x7E
SPDM_ERROR                    = 0x7F

SPDM_KEY_EXCHANGE_RSP           = 0x64
SPDM_FINISH_RSP                 = 0x65
SPDM_PSK_EXCHANGE_RSP           = 0x66
SPDM_PSK_FINISH_RSP             = 0x67
SPDM_HEARTBEAT_ACK              = 0x68
SPDM_KEY_UPDATE_ACK             = 0x69
SPDM_ENCAPSULATED_REQUEST       = 0x6A
SPDM_ENCAPSULATED_RESPONSE_ACK  = 0x6B
SPDM_END_SESSION_ACK            = 0x6C

SPDM_CSR                  = 0x6D
SPDM_SET_CERTIFICATE_RSP  = 0x6E
SPDM_CHUNK_SEND_ACK       = 0x05
SPDM_CHUNK_RESPONSE       = 0x06

SPDM_GET_DIGESTS             = 0x81
SPDM_GET_CERTIFICATE         = 0x82
SPDM_CHALLENGE               = 0x83
SPDM_GET_VERSION             = 0x84
SPDM_GET_MEASUREMENTS        = 0xE0
SPDM_GET_CAPABILITIES        = 0xE1
SPDM_NEGOTIATE_ALGORITHMS    = 0xE3
SPDM_VENDOR_DEFINED_REQUEST  = 0xFE
SPDM_RESPOND_IF_READY        = 0xFF

SPDM_KEY_EXCHANGE                   = 0xE4
SPDM_FINISH                         = 0xE5
SPDM_PSK_EXCHANGE                   = 0xE6
SPDM_PSK_FINISH                     = 0xE7
SPDM_HEARTBEAT                      = 0xE8
SPDM_KEY_UPDATE                     = 0xE9
SPDM_GET_ENCAPSULATED_REQUEST       = 0xEA
SPDM_DELIVER_ENCAPSULATED_RESPONSE  = 0xEB
SPDM_END_SESSION                    = 0xEC

SPDM_GET_CSR          = 0xED
SPDM_SET_CERTIFICATE  = 0xEE
SPDM_CHUNK_SEND       = 0x85
SPDM_CHUNK_GET        = 0x86

class SPDM_MESSAGE_HEADER (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("SPDMVersion",         UINT8),
    ("RequestResponseCode", UINT8),
    ("Param1",              UINT8),
    ("Param2",              UINT8)
    ]

SPDM_MESSAGE_VERSION_10  = 0x10
SPDM_MESSAGE_VERSION_11  = 0x11
SPDM_MESSAGE_VERSION_12  = 0x12
SPDM_MESSAGE_VERSION     = SPDM_MESSAGE_VERSION_10

class SPDM_GET_VERSION_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",  SPDM_MESSAGE_HEADER)
    ]

SPDM_VERSION_NUMBER  = UINT16

class SPDM_VERSION_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                  SPDM_MESSAGE_HEADER),
    ("Reserved",                UINT8),
    ("VersionNumberEntryCount", UINT8)
    # ("VersionNumberEntry",      SPDM_VERSION_NUMBER * VersionNumberEntryCount)
    ]

SPDM_VERSION_NUMBER_SHIFT_BIT  = 8

SPDM_VERSION_1_2_SIGNING_PREFIX_CONTEXT       = b"dmtf-spdm-v1.2.*"
SPDM_VERSION_1_2_SIGNING_PREFIX_CONTEXT_SIZE  = len(SPDM_VERSION_1_2_SIGNING_PREFIX_CONTEXT)
SPDM_VERSION_1_2_SIGNING_CONTEXT_SIZE         = 100

class SPDM_GET_CAPABILITIES_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",  SPDM_MESSAGE_HEADER),

    ("Reserved",          UINT8),
    ("CTExponent",        UINT8),
    ("Reserved2",         UINT16),
    ("Flags",             UINT32),
    ("DataTransferSize",  UINT32),
    ("MaxSpdmMsgSize",    UINT32)
    ]

class SPDM_CAPABILITIES_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",            SPDM_MESSAGE_HEADER),
    ("Reserved",          UINT8),
    ("CTExponent",        UINT8),
    ("Reserved2",         UINT16),
    ("Flags",             UINT32),
    ("DataTransferSize",  UINT32),
    ("MaxSpdmMsgSize",    UINT32)
    ]

SPDM_MIN_DATA_TRANSFER_SIZE_VERSION_12  = 42

SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP                    = BIT1
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHAL_CAP                    = BIT2
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP                 = BIT6
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP                     = BIT7
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MUT_AUTH_CAP                = BIT8
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_EX_CAP                  = BIT9
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP                     = (BIT10 | BIT11)
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP_REQUESTER           = BIT10
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP                   = BIT12
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_HBEAT_CAP                   = BIT13
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_UPD_CAP                 = BIT14
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_HANDSHAKE_IN_THE_CLEAR_CAP  = BIT15
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PUB_KEY_ID_CAP              = BIT16

SPDM_GET_CAPABILITIES_REQUEST_FLAGS_11_MASK = (\
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CERT_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHAL_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCRYPT_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MAC_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_MUT_AUTH_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_EX_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PSK_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_ENCAP_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_HBEAT_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_KEY_UPD_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_HANDSHAKE_IN_THE_CLEAR_CAP | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_PUB_KEY_ID_CAP)

SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHUNK_CAP  = BIT17
SPDM_GET_CAPABILITIES_REQUEST_FLAGS_12_MASK =   (\
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_11_MASK | \
        SPDM_GET_CAPABILITIES_REQUEST_FLAGS_CHUNK_CAP)

SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CACHE_CAP        = BIT0
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP         = BIT1
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP         = BIT2
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP         = (BIT3 | BIT4)
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP_NO_SIG  = BIT3
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP_SIG     = BIT4
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_FRESH_CAP   = BIT5
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_10_MASK          = (\
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CACHE_CAP | \
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_CAP | \
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHAL_CAP | \
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_CAP | \
        SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MEAS_FRESH_CAP)

SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP                     = BIT6
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP                         = BIT7
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MUT_AUTH_CAP                    = BIT8
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_EX_CAP                      = BIT9
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP                         = (BIT10 | BIT11)
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP_RESPONDER               = BIT10
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP_RESPONDER_WITH_CONTEXT  = BIT11
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP                       = BIT12
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_HBEAT_CAP                       = BIT13
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_UPD_CAP                     = BIT14
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_HANDSHAKE_IN_THE_CLEAR_CAP      = BIT15
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PUB_KEY_ID_CAP                  = BIT16

SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_11_MASK                         = (\
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_10_MASK | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCRYPT_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MAC_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_MUT_AUTH_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_EX_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PSK_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ENCAP_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_HBEAT_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_KEY_UPD_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_HANDSHAKE_IN_THE_CLEAR_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_PUB_KEY_ID_CAP)

SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHUNK_CAP       = BIT17
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ALIAS_CERT_CAP  = BIT18

SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_SET_CERT_CAP            = BIT19
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CSR_CAP                 = BIT20
SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_INSTALL_RESET_CAP  = BIT21

SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_12_MASK                 = (\
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_11_MASK | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CHUNK_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_ALIAS_CERT_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_SET_CERT_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CSR_CAP | \
    SPDM_GET_CAPABILITIES_RESPONSE_FLAGS_CERT_INSTALL_RESET_CAP)

class SPDM_NEGOTIATE_ALGORITHMS_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                      SPDM_MESSAGE_HEADER),
    ("Length",                      UINT16),
    ("MeasurementSpecification",    UINT8 ),
    ("OtherParamsSupport",          UINT8 ),
    ("BaseAsymAlgo",                UINT32),
    ("BaseHashAlgo",                UINT32),
    ("Reserved2",                   UINT8 * 12),
    ("ExtAsymCount",                UINT8 ),
    ("ExtHashCount",                UINT8 ),
    ("Reserved3",                   UINT16)
    # ("ExtAsym",                   SPDM_EXTENDED_ALGORITHM * ExtAsymCount),
    # ("ExtHash",                   SPDM_EXTENDED_ALGORITHM * ExtHashCount),
    # ("AlgStruct",                 SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE * Param1)
    ]

SPDM_NEGOTIATE_ALGORITHMS_REQUEST_MAX_LENGTH_VERSION_10         = BIT6
SPDM_NEGOTIATE_ALGORITHMS_REQUEST_MAX_LENGTH_VERSION_11         = BIT7
SPDM_NEGOTIATE_ALGORITHMS_REQUEST_MAX_LENGTH_VERSION_12         = BIT7
SPDM_NEGOTIATE_ALGORITHMS_REQUEST_MAX_EXT_ALG_COUNT_VERSION_10  = BIT3
SPDM_NEGOTIATE_ALGORITHMS_REQUEST_MAX_EXT_ALG_COUNT_VERSION_11  = (BIT4 | BIT2)
SPDM_NEGOTIATE_ALGORITHMS_REQUEST_MAX_EXT_ALG_COUNT_VERSION_12  = (BIT4 | BIT2)

class SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("AlgType",         UINT8 ),
    ("AlgCount",        UINT8 )
    # ("AlgSupported",  UINT8 * FixedAlgByteCount),
    # ("AlgExternal",   UINT32 * ExtAlgCount)
    ]

class SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_COUNT (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("ExtAlgCount",         UINT8, 4),
    ("FixedAlgByteCount",   UINT8, 4)
    ]

SPDM_NEGOTIATE_ALGORITHMS_MAX_NUM_STRUCT_TABLE_ALG  = 4

SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_DHE                = 2
SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_AEAD               = 3
SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_REQ_BASE_ASYM_ALG  = 4
SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE_ALG_TYPE_KEY_SCHEDULE       = 5

class SPDM_NEGOTIATE_ALGORITHMS_COMMON_STRUCT_TABLE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("AlgType",         UINT8),
    ("AlgCount",        UINT8),
    ("AlgSupported",    UINT16)
    ]

SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSASSA_2048          = BIT0
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSAPSS_2048          = BIT1
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSASSA_3072          = BIT2
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSAPSS_3072          = BIT3
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_ECDSA_ECC_NIST_P256  = BIT4
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSASSA_4096          = BIT5
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_RSAPSS_4096          = BIT6
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_ECDSA_ECC_NIST_P384  = BIT7
SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_ECDSA_ECC_NIST_P521  = BIT8

SPDM_ALGORITHMS_BASE_ASYM_ALGO_TPM_ALG_SM2_ECC_SM2_P256  = BIT9
SPDM_ALGORITHMS_BASE_ASYM_ALGO_EDDSA_ED25519             = BIT10
SPDM_ALGORITHMS_BASE_ASYM_ALGO_EDDSA_ED448               = BIT11

SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SHA_256   = BIT0
SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SHA_384   = BIT1
SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SHA_512   = BIT2
SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SHA3_256  = BIT3
SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SHA3_384  = BIT4
SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SHA3_512  = BIT5

SPDM_ALGORITHMS_BASE_HASH_ALGO_TPM_ALG_SM3_256  = BIT6

SPDM_ALGORITHMS_DHE_NAMED_GROUP_FFDHE_2048   = BIT0
SPDM_ALGORITHMS_DHE_NAMED_GROUP_FFDHE_3072   = BIT1
SPDM_ALGORITHMS_DHE_NAMED_GROUP_FFDHE_4096   = BIT2
SPDM_ALGORITHMS_DHE_NAMED_GROUP_SECP_256_R1  = BIT3
SPDM_ALGORITHMS_DHE_NAMED_GROUP_SECP_384_R1  = BIT4
SPDM_ALGORITHMS_DHE_NAMED_GROUP_SECP_521_R1  = BIT5

SPDM_ALGORITHMS_DHE_NAMED_GROUP_SM2_P256  = BIT6

SPDM_ALGORITHMS_AEAD_CIPHER_SUITE_AES_128_GCM        = BIT0
SPDM_ALGORITHMS_AEAD_CIPHER_SUITE_AES_256_GCM        = BIT1
SPDM_ALGORITHMS_AEAD_CIPHER_SUITE_CHACHA20_POLY1305  = BIT2

SPDM_ALGORITHMS_AEAD_CIPHER_SUITE_AEAD_SM4_GCM  = BIT3

SPDM_ALGORITHMS_KEY_SCHEDULE_HMAC_HASH  = BIT0

class SPDM_ALGORITHMS_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                      SPDM_MESSAGE_HEADER),

    ("Length",                      UINT16),
    ("MeasurementSpecificationSel", UINT8 ),
    ("OtherParamsSelection",        UINT8 ),
    ("MeasurementHashAlgo",         UINT32),
    ("BaseAsymSel",                 UINT32),
    ("BaseHashSel",                 UINT32),
    ("Reserved2",                   UINT8 * 12),
    ("ExtAsymSelCount",             UINT8 ),
    ("ExtHashSelCount",             UINT8 ),
    ("Reserved3",                   UINT16)

    # ("ExtAsymSel",                   SPDM_EXTENDED_ALGORITHM * ExtAsymSelCount),
    # ("ExtHashSel",                   SPDM_EXTENDED_ALGORITHM * ExtHashSelCount)
    # ("AlgStruct",                    SPDM_NEGOTIATE_ALGORITHMS_STRUCT_TABLE * Param1)
    ]

SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_RAW_BIT_STREAM_ONLY  = BIT0
SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SHA_256      = BIT1
SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SHA_384      = BIT2
SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SHA_512      = BIT3
SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SHA3_256     = BIT4
SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SHA3_384     = BIT5
SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SHA3_512     = BIT6

SPDM_ALGORITHMS_MEASUREMENT_HASH_ALGO_TPM_ALG_SM3_256  = BIT7

SPDM_ALGORITHMS_OPAQUE_DATA_FORMAT_NONE  = 0x0
SPDM_ALGORITHMS_OPAQUE_DATA_FORMAT_0     = 0x1
SPDM_ALGORITHMS_OPAQUE_DATA_FORMAT_1     = 0x2
SPDM_ALGORITHMS_OPAQUE_DATA_FORMAT_MASK  = 0xF

class SPDM_GENERAL_OPAQUE_DATA_TABLE_HEADER (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("TotalElements", UINT8),
    ("Reserved",      UINT8 * 3),

    # ("opaque_list", opaque_element_table_t  * N),
    ]

class SPDM_EXTENDED_ALGORITHM (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("RegistryID",  UINT8 ),
    ("Reserved",    UINT8 ),
    ("AlgorithmID", UINT16)
    ]

SPDM_REGISTRY_ID_DMTF     = 0
SPDM_REGISTRY_ID_TCG      = 1
SPDM_REGISTRY_ID_USB      = 2
SPDM_REGISTRY_ID_PCISIG   = 3
SPDM_REGISTRY_ID_IANA     = 4
SPDM_REGISTRY_ID_HDBASET  = 5
SPDM_REGISTRY_ID_MIPI     = 6
SPDM_REGISTRY_ID_CXL      = 7
SPDM_REGISTRY_ID_JEDEC    = 8

class SPDM_GET_DIGESTS_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",    SPDM_MESSAGE_HEADER)
    ]

class SPDM_DIGESTS_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",    SPDM_MESSAGE_HEADER)

    # ("Digest",   (UINT8 * DigestSize) * SlotCount)
    ]

class SPDM_GET_CERTIFICATE_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",    SPDM_MESSAGE_HEADER),
    ("Offset",    UINT16),
    ("Length",    UINT16)
    ]

class SPDM_CERTIFICATE_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",            SPDM_MESSAGE_HEADER),
    ("PortionLength",     UINT16),
    ("RemainderLength",   UINT16)
    # ("CertChain",         UINT8)
    ]

class SPDM_CERT_CHAIN (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Length",     UINT16),
    ("Reserved",   UINT16)
    # ("RootHash", UINT8 * HashSize),
    # ("Certificates", UINT8 * (Length - 4 - HashSize)),
    ]

class SPDM_CHALLENGE_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",  SPDM_MESSAGE_HEADER),
    ("Nonce",   UINT8 * 32)
    ]

class SPDM_CHALLENGE_AUTH_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",  SPDM_MESSAGE_HEADER)
    # ("CertChainHash",           UINT8 * DigestSize),
    # ("Nonce",                   UINT8 * 32),
    # ("MeasurementSummaryHash",  UINT8 * DigestSize),
    # ("OpaqueLength",            UINT16),
    # ("OpaqueData",              UINT8 * OpaqueLength),
    # ("Signature",               UINT8 * KeySize)
    ]

SPDM_REQUEST_NO_MEASUREMENT_SUMMARY_HASH     = 0
SPDM_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH  = 1
SPDM_REQUEST_ALL_MEASUREMENTS_HASH           = 0xFF

SPDM_CHALLENGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH      = SPDM_REQUEST_NO_MEASUREMENT_SUMMARY_HASH
SPDM_CHALLENGE_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH   = SPDM_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH
SPDM_CHALLENGE_REQUEST_ALL_MEASUREMENTS_HASH            = SPDM_REQUEST_ALL_MEASUREMENTS_HASH

class SPDM_CHALLENGE_AUTH_RESPONSE_ATTRIBUTE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("SlotNum",         UINT8, 4),
    ("Reserved",        UINT8, 3),
    ("BasicMutAuthReq", UINT8, 1)
    ]

SPDM_CHALLENGE_AUTH_RESPONSE_ATTRIBUTE_BASIC_MUT_AUTH_REQ  = BIT7

SPDM_CHALLENGE_AUTH_SIGN_CONTEXT           = b"responder-challenge_auth signing"
SPDM_CHALLENGE_AUTH_SIGN_CONTEXT_SIZE      = len(SPDM_CHALLENGE_AUTH_SIGN_CONTEXT)
SPDM_MUT_CHALLENGE_AUTH_SIGN_CONTEXT       = b"requester-challenge_auth signing"
SPDM_MUT_CHALLENGE_AUTH_SIGN_CONTEXT_SIZE  = len(SPDM_MUT_CHALLENGE_AUTH_SIGN_CONTEXT)

class SPDM_GET_MEASUREMENTS_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",        SPDM_MESSAGE_HEADER), 
    ("Nonce",         UINT8 * 32),
    ("SlotIDParam ",  UINT8)
    ]

class SPDM_GET_MEASUREMENTS_REQUEST_SLOT_ID_PARAMETER (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("SlotNum",   UINT8, 4),
    ("Reserved",  UINT8, 4)
    ]

SPDM_GET_MEASUREMENTS_REQUEST_SLOT_ID_MASK  = 0xF

SPDM_GET_MEASUREMENTS_REQUEST_ATTRIBUTES_GENERATE_SIGNATURE         = BIT0
SPDM_GET_MEASUREMENTS_REQUEST_ATTRIBUTES_RAW_BIT_STREAM_REQUESTED   = BIT1
SPDM_GET_MEASUREMENTS_REQUEST_ATTRIBUTES_NEW_MEASUREMENT_REQUESTED  = BIT2

SPDM_GET_MEASUREMENTS_REQUEST_MEASUREMENT_OPERATION_TOTAL_NUMBER_OF_MEASUREMENTS  = 0

SPDM_GET_MEASUREMENTS_REQUEST_MEASUREMENT_OPERATION_ALL_MEASUREMENTS  = 0xFF

class SPDM_MEASUREMENT_BLOCK_COMMON_HEADER (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Index",                       UINT8),
    ("MeasurementSpecification",    UINT8),
    ("MeasurementSize",             UINT16)
    # ("Measurement",    UINT8 * MeasurementSize),
    ]

SPDM_MEASUREMENT_BLOCK_HEADER_SPECIFICATION_DMTF  = BIT0

class SPDM_MEASUREMENT_BLOCK_DMTF_HEADER (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("DMTFSpecMeasurementValueType",    UINT8),
    ("DMTFSpecMeasurementValueSize",    UINT16)
    # ("DMTFSpecMeasurementValue",    UINT8 * DMTFSpecMeasurementValueSize),
    ]

class SPDM_MEASUREMENT_BLOCK_DMTF (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("MeasurementBlockCommonHeader",  SPDM_MEASUREMENT_BLOCK_COMMON_HEADER),
    ("MeasurementBlockDmtfHeader",    SPDM_MEASUREMENT_BLOCK_DMTF_HEADER)
    # ("HashValue",                   UINT8 * HashSize),
    ]

class SPDM_MEASUREMENTS_BLOCK_MEASUREMENT_TYPE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Content",       UINT8, 7),
    ("Presentation",  UINT8, 1)
    ]

SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_IMMUTABLE_ROM           = 0
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_MUTABLE_FIRMWARE        = 1
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_HARDWARE_CONFIGURATION  = 2
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_FIRMWARE_CONFIGURATION  = 3
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_MEASUREMENT_MANIFEST    = 4
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_DEVICE_MODE             = 5
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_VERSION                 = 6
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_SECURE_VERSION_NUMBER   = 7
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_MASK                    = 0x7
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_TYPE_RAW_BIT_STREAM          = BIT7

SPDM_MEASUREMENT_BLOCK_MEASUREMENT_INDEX_MEASUREMENT_MANIFEST  = 0xFD
SPDM_MEASUREMENT_BLOCK_MEASUREMENT_INDEX_DEVICE_MODE           = 0xFE

class SPDM_MEASUREMENT_DEVICE_MODE0 (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("OperationalModeCapabilities", UINT32),
    ("OperationalModeState",        UINT32),
    ("DeviceModeCapabilities",      UINT32),
    ("DeviceModeState",             UINT32)
    ]

SPDM_MEASUREMENT_DEVICE_OPERATION_MODE_MANUFACTURING_MODE   = BIT0
SPDM_MEASUREMENT_DEVICE_OPERATION_MODE_VALIDATION_MODE      = BIT1
SPDM_MEASUREMENT_DEVICE_OPERATION_MODE_NORMAL_MODE          = BIT2
SPDM_MEASUREMENT_DEVICE_OPERATION_MODE_RECOVERY_MODE        = BIT3
SPDM_MEASUREMENT_DEVICE_OPERATION_MODE_RMA_MODE             = BIT4
SPDM_MEASUREMENT_DEVICE_OPERATION_MODE_DECOMMISSIONED_MODE  = BIT5

SPDM_MEASUREMENT_DEVICE_MODE_NON_INVASIVE_DEBUG_MODE_IS_ACTIVE              = BIT0
SPDM_MEASUREMENT_DEVICE_MODE_INVASIVE_DEBUG_MODE_IS_ACTIVE                  = BIT1
SPDM_MEASUREMENT_DEVICE_MODE_NON_INVASIVE_DEBUG_MODE_HAS_BEEN_ACTIVE        = BIT2
SPDM_MEASUREMENT_DEVICE_MODE_INVASIVE_DEBUG_MODE_HAS_BEEN_ACTIVE            = BIT3
SPDM_MEASUREMENT_DEVICE_MODE_INVASIVE_DEBUG_MODE_HAS_BEEN_ACTIVE_AFTER_MFG  = BIT4

SPDM_MEASUREMENTS_SECURE_VERSION_NUMBER = UINT64

class SPDM_MEASUREMENTS_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                  SPDM_MESSAGE_HEADER),
    ("NumberOfBlocks",          UINT8),
    ("MeasurementRecordLength", UINT8 * 3)
    # ("MeasurementRecord",     UINT8 * MeasurementRecordLength),
    # ("Nonce",                 UINT8 * 32),
    # ("OpaqueLength",          UINT8 * UINT16),
    # ("OpaqueData",            UINT8 * OpaqueLength),
    # ("Signature",             UINT8 * KeySize)
    ]

SPDM_MEASUREMENTS_RESPONSE_SLOT_ID_MASK  = 0xF

SPDM_MEASUREMENTS_RESPONSE_CONTENT_CHANGE_MASK          = 0x30
SPDM_MEASUREMENTS_RESPONSE_CONTENT_CHANGE_NO_DETECTION  = 0x00
SPDM_MEASUREMENTS_RESPONSE_CONTENT_CHANGE_DETECTED      = 0x10
SPDM_MEASUREMENTS_RESPONSE_CONTENT_NO_CHANGE_DETECTED   = 0x20

SPDM_MEASUREMENTS_SIGN_CONTEXT       = b"responder-measurements signing"
SPDM_MEASUREMENTS_SIGN_CONTEXT_SIZE  = len(SPDM_MEASUREMENTS_SIGN_CONTEXT)

SPDM_MEL_SPECIFICATION_DMTF  = BIT0

class SPDM_ERROR_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER)
    # ("ExtendedErrorData", UINT8 * N)
    ]

SPDM_EXTENDED_ERROR_DATA_MAX_SIZE   = 32

SPDM_ERROR_CODE_INVALID_REQUEST         = 0x01
SPDM_ERROR_CODE_BUSY                    = 0x03
SPDM_ERROR_CODE_UNEXPECTED_REQUEST      = 0x04
SPDM_ERROR_CODE_UNSPECIFIED             = 0x05
SPDM_ERROR_CODE_UNSUPPORTED_REQUEST     = 0x07
SPDM_ERROR_CODE_MAJOR_VERSION_MISMATCH  = 0x41
SPDM_ERROR_CODE_RESPONSE_NOT_READY      = 0x42
SPDM_ERROR_CODE_REQUEST_RESYNCH         = 0x43
SPDM_ERROR_CODE_VENDOR_DEFINED          = 0xFF

SPDM_ERROR_CODE_DECRYPT_ERROR           = 0x06
SPDM_ERROR_CODE_REQUEST_IN_FLIGHT       = 0x08
SPDM_ERROR_CODE_INVALID_RESPONSE_CODE   = 0x09
SPDM_ERROR_CODE_SESSION_LIMIT_EXCEEDED  = 0x0A

SPDM_ERROR_CODE_SESSION_REQUIRED    = 0x0B
SPDM_ERROR_CODE_RESET_REQUIRED      = 0x0C
SPDM_ERROR_CODE_RESPONSE_TOO_LARGE  = 0x0D
SPDM_ERROR_CODE_REQUEST_TOO_LARGE   = 0x0E
SPDM_ERROR_CODE_LARGE_RESPONSE      = 0x0F
SPDM_ERROR_CODE_MESSAGE_LOST        = 0x10

class SPDM_ERROR_DATA_RESPONSE_NOT_READY (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("RDTExponent", UINT8),
    ("RequestCode", UINT8),
    ("Token",       UINT8),
    ("Rdtm",        UINT8)
    ]

class SPDM_ERROR_RESPONSE_DATA_RESPONSE_NOT_READY (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",          SPDM_MESSAGE_HEADER),
    ("ExtendErrorData", SPDM_ERROR_DATA_RESPONSE_NOT_READY)
    ]

class SPDM_ERROR_DATA_LARGE_RESPONSE0 (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Handle",  UINT8)
    ]

class SPDM_ERROR_RESPONSE_LARGE_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Handle",  UINT8)
    ]

class SPDM_RESPONSE_IF_READY_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",          SPDM_MESSAGE_HEADER)
    ]

SPDM_MAX_VENDOR_DEFINED_DATA_LEN  = 65535

SPDM_MAX_VENDOR_ID_LENGTH  = 255

class SPDM_VENDOR_DEFINED_REQUEST_MSG (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER),

    ("StandardID; ",          UINT16),
    ("Len;        ",          UINT8)

    # ("VendorID",              UINT8 * Len),
    # ("PayloadLength",         UINT16),
    # ("VendorDefinedPayload",  UINT8 * PlayloadLength)
    ]

class SPDM_VENDOR_DEFINED_RESPONSE_MSG (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER),

    ("StandardID; ",          UINT16),
    ("Len;        ",          UINT8)

    # ("VendorID",              UINT8 * Len),
    # ("PayloadLength",         UINT16),
    # ("VendorDefinedPayload",  UINT8 * PlayloadLength)
    ]

class SPDM_KEY_EXCHANGE_REQUEST0 (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER),

    ("ReqSessionID",    UINT16),
    ("Reserved",        UINT16),
    ("RandomData",      UINT8 * 32)
    # ("ExchangeData",  UINT8),
    # ("OpaqueLength",  UINT16),
    # ("OpaqueData",    UINT8 * OpaqueLength)
    ]

SPDM_KEY_EXCHANGE_REQUEST_SESSION_POLICY_TERMINATION_POLICY_RUNTIME_UPDATE  = BIT0

SPDM_KEY_EXCHANGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH     = SPDM_REQUEST_NO_MEASUREMENT_SUMMARY_HASH
SPDM_KEY_EXCHANGE_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH  = SPDM_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH
SPDM_KEY_EXCHANGE_REQUEST_ALL_MEASUREMENTS_HASH           = SPDM_REQUEST_ALL_MEASUREMENTS_HASH

class SPDM_KEY_EXCHANGE_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER),

    ("RspSessionID",        UINT16),
    ("MutAuthRequested",    UINT8),
    ("ReqSlotIDParam",      UINT8),
    ("RandomData",          UINT8 * 32)


    # ("ExchangeData",            UINT8 * D),
    # ("MeasurementSummaryHash",  UINT8 * DigestSize),
    # ("OpaqueLength",            UINT16),
    # ("OpaqueData",              UINT8 * OpaqueLength),
    # ("Signature",               UINT8 * S),
    # ("ResponderVerifyData",     UINT8 * H)
    ]

SPDM_KEY_EXCHANGE_RESPONSE_MUT_AUTH_REQUESTED                     = BIT0
SPDM_KEY_EXCHANGE_RESPONSE_MUT_AUTH_REQUESTED_WITH_ENCAP_REQUEST  = BIT1
SPDM_KEY_EXCHANGE_RESPONSE_MUT_AUTH_REQUESTED_WITH_GET_DIGESTS    = BIT2

SPDM_KEY_EXCHANGE_RESPONSE_SIGN_CONTEXT       = b"responder-key_exchange_rsp signing"
SPDM_KEY_EXCHANGE_RESPONSE_SIGN_CONTEXT_SIZE  = len(SPDM_KEY_EXCHANGE_RESPONSE_SIGN_CONTEXT)


SPDM_VERSION_1_2_KEY_EXCHANGE_REQUESTER_CONTEXT       = b"Requester-KEP-dmtf-spdm-v1.2"
SPDM_VERSION_1_2_KEY_EXCHANGE_REQUESTER_CONTEXT_SIZE  = len (SPDM_VERSION_1_2_KEY_EXCHANGE_REQUESTER_CONTEXT)

SPDM_VERSION_1_2_KEY_EXCHANGE_RESPONDER_CONTEXT       = b"Responder-KEP-dmtf-spdm-v1.2"
SPDM_VERSION_1_2_KEY_EXCHANGE_RESPONDER_CONTEXT_SIZE  = len(SPDM_VERSION_1_2_KEY_EXCHANGE_RESPONDER_CONTEXT)

class SPDM_FINISH_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER)

    # ("Signature",               UINT8 * S),
    # ("RequesterVerifyData",     UINT8 * H)
    ]

SPDM_FINISH_REQUEST_ATTRIBUTES_SIGNATURE_INCLUDED  = BIT0

class SPDM_FINISH_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",              SPDM_MESSAGE_HEADER)

    # ("ResponderVerifyData",     UINT8 * H)
    ]

SPDM_FINISH_SIGN_CONTEXT       = b"requester-finish signing"
SPDM_FINISH_SIGN_CONTEXT_SIZE  = len(SPDM_FINISH_SIGN_CONTEXT)

class SPDM_PSK_EXCHANGE_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER),
    ("ReqSessionID",              UINT16),
    ("PSKHintLength",             UINT16),
    ("RequesterContextLength",    UINT16),
    ("OpaqueLength",              UINT16)

    # ("PSKHint",                   UINT8 * PSKHintLength),
    # ("RequesterContext",          UINT8 * RequesterContextLength),
    # ("OpaqueData",                UINT8 * OpaqueLength)
    ]

SPDM_PSK_EXCHANGE_REQUEST_NO_MEASUREMENT_SUMMARY_HASH     = SPDM_REQUEST_NO_MEASUREMENT_SUMMARY_HASH
SPDM_PSK_EXCHANGE_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH  = SPDM_REQUEST_TCB_COMPONENT_MEASUREMENT_HASH
SPDM_PSK_EXCHANGE_REQUEST_ALL_MEASUREMENTS_HASH           = SPDM_REQUEST_ALL_MEASUREMENTS_HASH

class SPDM_PSK_EXCHANGE_RESPONSE0 (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER),
    ("RspSessionID",              UINT16),
    ("Reserved",                  UINT16),
    ("ResponderContextLength",    UINT16),
    ("OpaqueLength",              UINT16)

    # ("MeasurementSummaryHash",    UINT8 * DigestSize),
    # ("ResponderContext",          UINT8 * ResponderContextLength),
    # ("OpaqueData",                UINT8 * ResponderContextLength0),
    # ("ResponderVerifyData",       UINT8 * H)
    ]

class SPDM_PSK_FINISH_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)

    # ("RequesterVerifyData",       UINT8 * H)
    ]

class SPDM_PSK_FINISH_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_HEARTBEAT_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_HEARTBEAT_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_KEY_UPDATE_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_KEY       = 1
SPDM_KEY_UPDATE_OPERATIONS_TABLE_UPDATE_ALL_KEYS  = 2
SPDM_KEY_UPDATE_OPERATIONS_TABLE_VERIFY_NEW_KEY   = 3

class SPDM_KEY_UPDATE_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_GET_ENCAPSULATED_REQUEST_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_ENCAPSULATED_REQUEST_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    # ("EncapsulatedRequest",       UINT8 * N)
    ]

class SPDM_DELIVER_ENCAPSULATED_RESPONSE_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    # ("EncapsulatedResponse",       UINT8 * N)
    ]

class SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER),
    ("AckRequestId",              UINT8),
    ("Reserved",                  UINT8 * 3)
    # ("EncapsulatedRequest",       UINT8 * N)
    ]

SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_ABSENT           = 0
SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_PRESENT          = 1
SPDM_ENCAPSULATED_RESPONSE_ACK_RESPONSE_PAYLOAD_TYPE_REQ_SLOT_NUMBER  = 2

class SPDM_END_SESSION_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

SPDM_END_SESSION_REQUEST_ATTRIBUTES_PRESERVE_NEGOTIATED_STATE_CLEAR  = BIT0

class SPDM_END_SESSION_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_SET_CERTIFICATE_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

SPDM_SET_CERTIFICATE_REQUEST_SLOT_ID_MASK  = 0xF

SPDM_SET_CERTIFICATE_REQUEST_ATTRIBUTES_CERT_MODEL_MASK    = 0x70
SPDM_SET_CERTIFICATE_REQUEST_ATTRIBUTES_CERT_MODEL_OFFSET  = 4
SPDM_SET_CERTIFICATE_REQUEST_ATTRIBUTES_ERASE              = 0x80

class SPDM_SET_CERTIFICATE_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER)
    ]

class SPDM_GET_CSR_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",                    SPDM_MESSAGE_HEADER),
    ("RequesterInfoLength",       UINT16),
    ("OpaqueDataLength",          UINT16)

    # ("RequesterInfo",            UINT8 * RequesterInfoLength),
    # ("OpaqueData",               UINT8 * OpaqueDataLength)
    ]

SPDM_GET_CSR_REQUEST_ATTRIBUTES_CERT_MODEL_MASK          = 0x07
SPDM_GET_CSR_REQUEST_ATTRIBUTES_CSR_TRACKING_TAG_MASK    = 0x38
SPDM_GET_CSR_REQUEST_ATTRIBUTES_CSR_TRACKING_TAG_OFFSET  = 3
SPDM_GET_CSR_REQUEST_ATTRIBUTES_OVERWRITE                = 0x80
SPDM_GET_CSR_REQUEST_ATTRIBUTES_MAX_CSR_CERT_MODEL       = 4

SPDM_MAX_CSR_SIZE  = 65535

class SPDM_CSR_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",        SPDM_MESSAGE_HEADER),
    ("CsrLength",     UINT16),
    ("Reserved",      UINT16)
    ]

class SPDM_CHUNK_SEND_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",        SPDM_MESSAGE_HEADER),
    ("ChunkSeqNo",    UINT16),
    ("Reserved",      UINT16),
    ("ChunkSize",     UINT32)

    # ("SpdmChunk",     UINT8 * SpdmChunk)
    ]

SPDM_CHUNK_SEND_REQUEST_ATTRIBUTE_LAST_CHUNK  = (1 << 0)

class SPDM_CHUNK_SEND_ACK_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",        SPDM_MESSAGE_HEADER),
    ("ChunkSeqNo",    UINT16)

    # ("response_to_large_request",     UINT8 * variable)
    ]

SPDM_CHUNK_SEND_ACK_RESPONSE_ATTRIBUTE_EARLY_ERROR_DETECTED  = (1 << 0)

class SPDM_CHUNK_GET_REQUEST (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",        SPDM_MESSAGE_HEADER),
    ("ChunkSeqNo",    UINT16)
    ]

class SPDM_CHUNK_RESPONSE_RESPONSE (EFIPY_INDUSTRY_STRUCTURE):
  _fields_ = [
    ("Header",        SPDM_MESSAGE_HEADER),
    ("ChunkSeqNo",    UINT16),
    ("Reserved",      UINT16),
    ("ChunkSize",     UINT16)

    # ("SpdmChunk",     UINT8 * ChunkSize)
    ]

SPDM_CHUNK_GET_RESPONSE_ATTRIBUTE_LAST_CHUNK  = (1 << 0)

SPDM_VERSION_1_1_BIN_CONCAT_LABEL  = b"spdm1.1 "
SPDM_VERSION_1_2_BIN_CONCAT_LABEL  = b"spdm1.2 "
SPDM_BIN_STR_0_LABEL               = b"derived"
SPDM_BIN_STR_1_LABEL               = b"req hs data"
SPDM_BIN_STR_2_LABEL               = b"rsp hs data"
SPDM_BIN_STR_3_LABEL               = b"req app data"
SPDM_BIN_STR_4_LABEL               = b"rsp app data"
SPDM_BIN_STR_5_LABEL               = b"key"
SPDM_BIN_STR_6_LABEL               = b"iv"
SPDM_BIN_STR_7_LABEL               = b"finished"
SPDM_BIN_STR_8_LABEL               = b"exp master"
SPDM_BIN_STR_9_LABEL               = b"traffic upd"

SPDM_ST1_VALUE_US  = 100000
